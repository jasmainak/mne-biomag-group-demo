

.. _sphx_glr_auto_examples_plot_fanning.py:


Baselining vs. Highpass filtering
=================================

Here we compare the evokeds when we baseline it vs.
highpass filter it.



.. code-block:: python


    import os.path as op

    import mne
    from mne import Epochs

    from library.config import study_path

    subject = "sub003"
    event_ids = [5, 6, 7]  # Famous faces
    filter_params = dict(fir_window='hann', phase='zero',
                         h_trans_bandwidth='auto', filter_length='auto',
                         fir_design='firwin')







Read in raw data and prepare for epoching



.. code-block:: python

    raw_fname = op.join(study_path, 'ds117', subject, 'MEG', 'run_01_sss.fif')
    raw = mne.io.read_raw_fif(raw_fname, preload=True)

    picks = mne.pick_types(raw.info, meg='mag', exclude='bads')
    events = mne.find_events(raw, stim_channel='STI101', consecutive='increasing',
                             mask=4352, mask_type='not_and', min_duration=0.003,
                             verbose=True)





.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /tsi/doctorants/data_gramfort/dgw_faces/ds117/sub003/MEG/run_01_sss.fif...
    This filename (/tsi/doctorants/data_gramfort/dgw_faces/ds117/sub003/MEG/run_01_sss.fif) does not conform to MNE naming conventions. All raw files should end with raw.fif, raw_sss.fif, raw_tsss.fif, raw.fif.gz, raw_sss.fif.gz or raw_tsss.fif.gz
        Range : 222200 ... 765599 =    202.000 ...   695.999 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 543399  =      0.000 ...   493.999 secs...
    147 events found
    Events id: [ 5  6  7 13 14 15 17 18 19]


Just some config for plotting



.. code-block:: python


    import matplotlib.pyplot as plt  # noqa
    from library.config import set_matplotlib_defaults  # noqa
    set_matplotlib_defaults(plt)

    ylim = dict(mag=(-400, 400))







First, we don't highpass filter and only baseline. Note how it creates a
spatially varying distortation of the time-domain signal in the form
of "fanning"



.. code-block:: python

    raw.filter(None, 40, **filter_params)
    evoked = Epochs(raw, events, event_id=event_ids, picks=picks,
                    baseline=(None, 0)).average()
    fig = evoked.plot_joint(times="auto", title=None,
                            ts_args=dict(ylim=ylim, spatial_colors=True),
                            topomap_args=dict(vmin=-300, vmax=300))
    fig.set_size_inches(12, 6, forward=True)
    fig.savefig('FanningA.pdf', bbox_to_inches='tight')




.. image:: /auto_examples/images/sphx_glr_plot_fanning_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Setting up low-pass filter at 40 Hz
    h_trans_bandwidth chosen to be 10.0 Hz
    Filter length of 341 samples (0.310 sec) selected
    48 matching events found
    0 projection items activated


Next, we highpass filter (but no lowpass filter as we have already done it)
but don't baseline. Now, the late effects in the topography are no longer
visible (see above) and the "fanning" has disappeared.



.. code-block:: python

    raw.filter(1, None, l_trans_bandwidth=0.5, **filter_params)
    evoked = Epochs(raw, events, event_id=event_ids, picks=picks,
                    baseline=None).average()
    fig = evoked.plot_joint(times="auto", title=None,
                            ts_args=dict(ylim=ylim, spatial_colors=True),
                            topomap_args=dict(vmin=-300, vmax=300))
    fig.set_size_inches(12, 6, forward=True)
    fig.savefig('FanningB.pdf', bbox_to_inches='tight')



.. image:: /auto_examples/images/sphx_glr_plot_fanning_002.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Setting up high-pass filter at 1 Hz
    Filter length of 6820 samples (6.200 sec) selected
    48 matching events found
    0 projection items activated


**Total running time of the script:** ( 0 minutes  38.435 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_fanning.py <plot_fanning.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_fanning.ipynb <plot_fanning.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
